name: Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          cache: pnpm

      - name: Install Dependencies
        run: pnpm install
        shell: bash

      - name: Create Release Pull Request
        id: changesets
        uses: changesets/action@v1
        with:
          commit: 'chore(release): version packages'
          title: 'chore(release): version packages'
          publish: pnpm run release
          createGithubReleases: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag
        if: steps.changesets.outputs.published == 'true'
        id: tag
        run: echo "TAG=$(git describe --abbrev=0 --tags)" >> $GITHUB_OUTPUT

      - name: Create GitHub Release (auto notes)
        if: steps.changesets.outputs.published == 'true'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag.outputs.TAG }}
          generateReleaseNotes: true
          omitBody: true

      - name: Get Release Info and Send Discord Notification
        if: steps.changesets.outputs.published == 'true'
        run: |
          echo "Getting release info for tag: ${{ steps.tag.outputs.TAG }}"

          # Get release info from GitHub API
          RELEASE_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.tag.outputs.TAG }}")

          # Extract release notes and remove HTML comments
          RELEASE_NOTES=$(echo "$RELEASE_DATA" | jq -r '.body // "No release notes available"')

          # Remove HTML comments (<!-- ... -->)
          RELEASE_NOTES=$(echo "$RELEASE_NOTES" | sed 's/<!--[^>]*-->//g')

          # Simply replace markdown headers with better formatting, preserve all original spacing
          RELEASE_NOTES=$(echo "$RELEASE_NOTES" | \
            sed 's/^## \(.*\)$/**\1**/g' | \
            sed 's/^### \(.*\)$/â–¸ **\1**/g' | \
            sed 's/^#### \(.*\)$/  â€¢ **\1**/g' | \
            sed 's/^##### \(.*\)$/    â—¦ **\1**/g')

          # Only remove leading/trailing whitespace from the entire text
          RELEASE_NOTES=$(echo "$RELEASE_NOTES" | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')

          # Limit to first 900 characters for Discord embed limit (leaving room for truncation text)
          if [ ${#RELEASE_NOTES} -gt 900 ]; then
            RELEASE_NOTES=$(echo "$RELEASE_NOTES" | head -c 900)
            RELEASE_NOTES="${RELEASE_NOTES}..."
          fi

          # Save to file to avoid shell escaping issues
          echo "$RELEASE_NOTES" > /tmp/release_notes.txt

          # Get release URL
          RELEASE_URL=$(echo "$RELEASE_DATA" | jq -r '.html_url // ""')

          echo "Sending Discord notification for tag: ${{ steps.tag.outputs.TAG }}"

          # Read release notes from file and properly escape for JSON
          RELEASE_NOTES_JSON=$(cat /tmp/release_notes.txt | jq -Rs .)

          # Create the JSON payload
          cat << EOF > /tmp/discord_payload.json
          {
            "embeds": [{
              "title": "ðŸŽ‰ New Release Published!",
              "description": "**${{ github.repository }}** has published a new release!",
              "url": "$RELEASE_URL",
              "color": 48253,
              "fields": [
                {
                  "name": "Version",
                  "value": "\`${{ steps.tag.outputs.TAG }}\`",
                  "inline": true
                },
                {
                  "name": "Repository",
                  "value": "[${{ github.repository }}](https://github.com/${{ github.repository }})",
                  "inline": true
                },
                {
                  "name": "Release Notes",
                  "value": $RELEASE_NOTES_JSON,
                  "inline": false
                }
              ],
              "footer": {
                "text": "GitHub Actions",
                "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
              },
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"
            }]
          }
          EOF

          echo "Discord payload:"
          cat /tmp/discord_payload.json

          # Send to Discord
          curl -H "Content-Type: application/json" \
               -X POST \
               -d @/tmp/discord_payload.json \
               ${{ secrets.DISCORD_WEBHOOK_URL }}
