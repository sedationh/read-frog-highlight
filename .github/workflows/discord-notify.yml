name: Discord Release Notification

on:
  workflow_dispatch:
    inputs:
      tag:
        description: Release tag to notify about (leave empty for latest)
        required: false
        type: string

jobs:
  notify:
    name: Send Discord Notification
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Get target tag
        id: tag
        run: |
          if [ -n "${{ github.event.inputs.tag }}" ]; then
            TAG="${{ github.event.inputs.tag }}"
            echo "Using input tag: $TAG"
          else
            # Get latest release tag from GitHub API instead of git describe
            TAG=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/latest" \
              | jq -r '.tag_name // ""')

            if [ -z "$TAG" ] || [ "$TAG" = "null" ]; then
              echo "No releases found, trying git describe..."
              TAG=$(git describe --abbrev=0 --tags 2>/dev/null || echo "")
            fi

            echo "Found latest tag: $TAG"
          fi

          if [ -z "$TAG" ]; then
            echo "Error: No tag found!"
            exit 1
          fi

          echo "TAG=$TAG" >> $GITHUB_OUTPUT

      - name: Get Release Info
        id: release_info
        run: |
          echo "Getting release info for tag: ${{ steps.tag.outputs.TAG }}"

          # Get release info from GitHub API
          RELEASE_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.tag.outputs.TAG }}")

          # Check if API call was successful
          if echo "$RELEASE_DATA" | jq -e '.message' > /dev/null 2>&1; then
            echo "API Error: $(echo "$RELEASE_DATA" | jq -r '.message')"
            echo "Trying to use latest release instead..."
            RELEASE_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          fi

          # Extract release notes and remove HTML comments
          RELEASE_NOTES=$(echo "$RELEASE_DATA" | jq -r '.body // "No release notes available"')

          # Remove HTML comments (<!-- ... -->)
          RELEASE_NOTES=$(echo "$RELEASE_NOTES" | sed 's/<!--[^>]*-->//g')

          # Simply replace markdown headers with better formatting, preserve all original spacing
          RELEASE_NOTES=$(echo "$RELEASE_NOTES" | \
            sed 's/^## \(.*\)$/**\1**/g' | \
            sed 's/^### \(.*\)$/â–¸ **\1**/g' | \
            sed 's/^#### \(.*\)$/  â€¢ **\1**/g' | \
            sed 's/^##### \(.*\)$/    â—¦ **\1**/g')

          # Only remove leading/trailing whitespace from the entire text
          RELEASE_NOTES=$(echo "$RELEASE_NOTES" | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')

          # Limit to first 900 characters for Discord embed limit (leaving room for truncation text)
          if [ ${#RELEASE_NOTES} -gt 900 ]; then
            RELEASE_NOTES=$(echo "$RELEASE_NOTES" | head -c 900)
            RELEASE_NOTES="${RELEASE_NOTES}..."
          fi

          # Save to file to avoid shell escaping issues (Discord strips leading whitespace anyway)
          echo "$RELEASE_NOTES" > /tmp/release_notes.txt

          # Get release URL
          RELEASE_URL=$(echo "$RELEASE_DATA" | jq -r '.html_url // ""')
          echo "RELEASE_URL=$RELEASE_URL" >> $GITHUB_OUTPUT

          echo "Release URL: $RELEASE_URL"

      - name: Send Discord Notification
        run: |
          echo "Sending Discord notification for tag: ${{ steps.tag.outputs.TAG }}"

          # Read release notes from file and properly escape for JSON
          RELEASE_NOTES=$(cat /tmp/release_notes.txt | jq -Rs .)

          # Create the JSON payload
          cat << EOF > /tmp/discord_payload.json
          {
            "embeds": [{
              "title": "ðŸŽ‰ Release Notification",
              "description": "**${{ github.repository }}** has published a new release!",
              "url": "${{ steps.release_info.outputs.RELEASE_URL }}",
              "color": 48253,
              "fields": [
                {
                  "name": "Version",
                  "value": "\`${{ steps.tag.outputs.TAG }}\`",
                  "inline": true
                },
                {
                  "name": "Repository",
                  "value": "[${{ github.repository }}](https://github.com/${{ github.repository }})",
                  "inline": true
                },
                {
                  "name": "Release Notes",
                  "value": $RELEASE_NOTES,
                  "inline": false
                }
              ],
              "footer": {
                "text": "GitHub Actions",
                "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
              },
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"
            }]
          }
          EOF

          echo "Discord payload:"
          cat /tmp/discord_payload.json

          # Send to Discord
          curl -H "Content-Type: application/json" \
               -X POST \
               -d @/tmp/discord_payload.json \
               ${{ secrets.DISCORD_WEBHOOK_URL }}
